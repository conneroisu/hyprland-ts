/**
 * Simple validation tests
 * Tests core validation functionality
 */

import { describe, test, expect } from 'vitest';
import { 
  validateHyprlandWindow,
  validateHyprlandWorkspace,
  validateHyprlandMonitor,
  isHyprlandWindow,
  isHyprlandWorkspace,
  isHyprlandMonitor
} from './validation.js';
import { 
  createMockWindow,
  createMockWorkspace,
  createMockMonitor
} from './test-utils.js';

describe('Validation Core Functions', () => {
  describe('validateHyprlandWindow', () => {
    test('should validate correct window objects', () => {
      const window = createMockWindow();
      const result = validateHyprlandWindow(window);
      
      expect(result.success).toBe(true);
      expect(result.data).toEqual(window);
      expect(result.errors).toBeUndefined();
    });
    
    test('should reject invalid window objects', () => {
      const invalidWindow = { invalid: 'object' };
      const result = validateHyprlandWindow(invalidWindow);
      
      expect(result.success).toBe(false);
      expect(result.data).toBeUndefined();
      expect(result.errors).toBeDefined();
      expect(result.errors!.length).toBeGreaterThan(0);
    });
  });

  describe('validateHyprlandWorkspace', () => {
    test('should validate correct workspace objects', () => {
      const workspace = createMockWorkspace();
      const result = validateHyprlandWorkspace(workspace);
      
      expect(result.success).toBe(true);
      expect(result.data).toEqual(workspace);
    });
  });

  describe('validateHyprlandMonitor', () => {
    test('should validate correct monitor objects', () => {
      const monitor = createMockMonitor();
      const result = validateHyprlandMonitor(monitor);
      
      expect(result.success).toBe(true);
      expect(result.data).toEqual(monitor);
    });
  });

  describe('Type Guards', () => {
    test('isHyprlandWindow should identify valid windows', () => {
      const window = createMockWindow();
      expect(isHyprlandWindow(window)).toBe(true);
      expect(isHyprlandWindow({})).toBe(false);
      expect(isHyprlandWindow(null)).toBe(false);
    });

    test('isHyprlandWorkspace should identify valid workspaces', () => {
      const workspace = createMockWorkspace();
      expect(isHyprlandWorkspace(workspace)).toBe(true);
      expect(isHyprlandWorkspace({})).toBe(false);
    });

    test('isHyprlandMonitor should identify valid monitors', () => {
      const monitor = createMockMonitor();
      expect(isHyprlandMonitor(monitor)).toBe(true);
      expect(isHyprlandMonitor({})).toBe(false);
    });
  });
});