/**
 * Unit tests for Hyprland type definitions and validation
 * Tests against realistic API response data
 */

import { describe, test, expect } from 'vitest';
import type {
  HyprlandWindow,
  HyprlandWorkspace,
  HyprlandMonitor,
  HyprlandWorkspaceInfo,
} from './types.js';
import {
  isHyprlandWindow,
  isHyprlandWorkspace,
  isHyprlandMonitor,
  isHyprlandWorkspaceInfo,
  validateHyprlandWindow,
  validateHyprlandWorkspace,
  validateHyprlandMonitor,
  validateHyprlandWindowArray,
} from './validation.js';

// ============================================================================\n// Test Data - Realistic Hyprland API Responses\n// ============================================================================\n\n/** Mock HyprlandWorkspaceInfo */\nconst mockWorkspaceInfo: HyprlandWorkspaceInfo = {\n  id: 1,\n  name: '1',\n};\n\n/** Mock HyprlandWindow (realistic client -j response) */\nconst mockWindow: HyprlandWindow = {\n  address: '0x5649a1b4f380',\n  mapped: true,\n  hidden: false,\n  at: [1920, 25],\n  size: [1878, 1055],\n  workspace: mockWorkspaceInfo,\n  floating: false,\n  monitor: 0,\n  class: 'firefox',\n  title: 'Mozilla Firefox',\n  pid: 12345,\n  xwayland: false,\n  pinned: false,\n  fullscreen: false,\n  fullscreenMode: 0,\n  focusHistoryID: 0,\n};\n\n/** Mock HyprlandWorkspace (realistic workspaces -j response) */\nconst mockWorkspace: HyprlandWorkspace = {\n  id: 1,\n  name: '1',\n  monitor: 'DP-1',\n  monitorID: 0,\n  windows: 3,\n  hasfullscreen: false,\n  lastwindow: '0x5649a1b4f380',\n  lastwindowtitle: 'Mozilla Firefox',\n};\n\n/** Mock HyprlandMonitor (realistic monitors -j response) */\nconst mockMonitor: HyprlandMonitor = {\n  id: 0,\n  name: 'DP-1',\n  description: 'Dell Inc. DELL U2720Q 123456789',\n  make: 'Dell Inc.',\n  model: 'DELL U2720Q',\n  serial: '123456789',\n  width: 3840,\n  height: 2160,\n  refreshRate: 60.0,\n  x: 0,\n  y: 0,\n  activeWorkspace: mockWorkspaceInfo,\n  specialWorkspace: { id: -1, name: 'special:special' },\n  reserved: [0, 0, 0, 0],\n  scale: 1.5,\n  transform: 0,\n  focused: true,\n  dpmsStatus: true,\n  vrr: false,\n  availableModes: ['3840x2160@60', '3840x2160@30', '1920x1080@60'],\n};\n\n// ============================================================================\n// Type Guard Tests\n// ============================================================================\n\ndescribe('Type Guards', () => {\n  describe('isHyprlandWorkspaceInfo', () => {\n    test('should validate correct workspace info', () => {\n      expect(isHyprlandWorkspaceInfo(mockWorkspaceInfo)).toBe(true);\n    });\n    \n    test('should reject invalid workspace info', () => {\n      expect(isHyprlandWorkspaceInfo({})).toBe(false);\n      expect(isHyprlandWorkspaceInfo({ id: 'invalid' })).toBe(false);\n      expect(isHyprlandWorkspaceInfo({ id: 1 })).toBe(false); // missing name\n      expect(isHyprlandWorkspaceInfo({ name: 'test' })).toBe(false); // missing id\n      expect(isHyprlandWorkspaceInfo(null)).toBe(false);\n      expect(isHyprlandWorkspaceInfo('string')).toBe(false);\n    });\n  });\n  \n  describe('isHyprlandWindow', () => {\n    test('should validate correct window object', () => {\n      expect(isHyprlandWindow(mockWindow)).toBe(true);\n    });\n    \n    test('should reject invalid window objects', () => {\n      expect(isHyprlandWindow({})).toBe(false);\n      expect(isHyprlandWindow(null)).toBe(false);\n      expect(isHyprlandWindow('string')).toBe(false);\n      \n      // Missing required fields\n      const invalidWindow = { ...mockWindow };\n      delete (invalidWindow as any).address;\n      expect(isHyprlandWindow(invalidWindow)).toBe(false);\n    });\n    \n    test('should validate array fields correctly', () => {\n      const invalidAt = { ...mockWindow, at: [100] }; // wrong length\n      expect(isHyprlandWindow(invalidAt)).toBe(false);\n      \n      const invalidSize = { ...mockWindow, size: ['invalid', 'types'] };\n      expect(isHyprlandWindow(invalidSize)).toBe(false);\n    });\n  });\n  \n  describe('isHyprlandWorkspace', () => {\n    test('should validate correct workspace object', () => {\n      expect(isHyprlandWorkspace(mockWorkspace)).toBe(true);\n    });\n    \n    test('should reject invalid workspace objects', () => {\n      expect(isHyprlandWorkspace({})).toBe(false);\n      expect(isHyprlandWorkspace(null)).toBe(false);\n      \n      const invalidWorkspace = { ...mockWorkspace, id: 'invalid' };\n      expect(isHyprlandWorkspace(invalidWorkspace)).toBe(false);\n    });\n  });\n  \n  describe('isHyprlandMonitor', () => {\n    test('should validate correct monitor object', () => {\n      expect(isHyprlandMonitor(mockMonitor)).toBe(true);\n    });\n    \n    test('should reject invalid monitor objects', () => {\n      expect(isHyprlandMonitor({})).toBe(false);\n      expect(isHyprlandMonitor(null)).toBe(false);\n      \n      const invalidMonitor = { ...mockMonitor, refreshRate: 'invalid' };\n      expect(isHyprlandMonitor(invalidMonitor)).toBe(false);\n    });\n    \n    test('should validate reserved array correctly', () => {\n      const invalidReserved = { ...mockMonitor, reserved: [0, 0, 0] }; // wrong length\n      expect(isHyprlandMonitor(invalidReserved)).toBe(false);\n    });\n  });\n});\n\n// ============================================================================\n// Validator Tests\n// ============================================================================\n\ndescribe('Validators', () => {\n  describe('validateHyprlandWindow', () => {\n    test('should validate correct window', () => {\n      const result = validateHyprlandWindow(mockWindow);\n      expect(result.success).toBe(true);\n      expect(result.data).toEqual(mockWindow);\n      expect(result.errors).toBeUndefined();\n    });\n    \n    test('should provide detailed errors for invalid window', () => {\n      const result = validateHyprlandWindow({});\n      expect(result.success).toBe(false);\n      expect(result.data).toBeUndefined();\n      expect(result.errors).toBeDefined();\n      expect(result.errors!.length).toBeGreaterThan(0);\n      expect(result.errors!.some(error => error.includes('address'))).toBe(true);\n    });\n    \n    test('should validate nested workspace info', () => {\n      const invalidWindow = {\n        ...mockWindow,\n        workspace: { id: 'invalid', name: 123 },\n      };\n      const result = validateHyprlandWindow(invalidWindow);\n      expect(result.success).toBe(false);\n      expect(result.errors!.some(error => error.includes('workspace'))).toBe(true);\n    });\n  });\n  \n  describe('validateHyprlandWorkspace', () => {\n    test('should validate correct workspace', () => {\n      const result = validateHyprlandWorkspace(mockWorkspace);\n      expect(result.success).toBe(true);\n      expect(result.data).toEqual(mockWorkspace);\n    });\n    \n    test('should provide detailed errors', () => {\n      const result = validateHyprlandWorkspace({ id: 'invalid' });\n      expect(result.success).toBe(false);\n      expect(result.errors!.some(error => error.includes('id'))).toBe(true);\n    });\n  });\n  \n  describe('validateHyprlandMonitor', () => {\n    test('should validate correct monitor', () => {\n      const result = validateHyprlandMonitor(mockMonitor);\n      expect(result.success).toBe(true);\n      expect(result.data).toEqual(mockMonitor);\n    });\n    \n    test('should validate nested workspace info', () => {\n      const invalidMonitor = {\n        ...mockMonitor,\n        activeWorkspace: { invalid: 'data' },\n      };\n      const result = validateHyprlandMonitor(invalidMonitor);\n      expect(result.success).toBe(false);\n      expect(result.errors!.some(error => error.includes('activeWorkspace'))).toBe(true);\n    });\n  });\n  \n  describe('validateHyprlandWindowArray', () => {\n    test('should validate array of windows', () => {\n      const windows = [mockWindow, { ...mockWindow, address: '0x123' }];\n      const result = validateHyprlandWindowArray(windows);\n      expect(result.success).toBe(true);\n      expect(result.data).toHaveLength(2);\n    });\n    \n    test('should handle empty array', () => {\n      const result = validateHyprlandWindowArray([]);\n      expect(result.success).toBe(true);\n      expect(result.data).toEqual([]);\n    });\n    \n    test('should provide indexed error messages', () => {\n      const windows = [mockWindow, { invalid: 'window' }];\n      const result = validateHyprlandWindowArray(windows);\n      expect(result.success).toBe(false);\n      expect(result.errors!.some(error => error.includes('index 1'))).toBe(true);\n    });\n    \n    test('should reject non-array input', () => {\n      const result = validateHyprlandWindowArray('not an array');\n      expect(result.success).toBe(false);\n      expect(result.errors!.some(error => error.includes('array'))).toBe(true);\n    });\n  });\n});\n\n// ============================================================================\n// Integration Tests with Realistic Data\n// ============================================================================\n\ndescribe('Integration Tests', () => {\n  test('should handle complex nested structures', () => {\n    const complexWindow: HyprlandWindow = {\n      ...mockWindow,\n      workspace: {\n        id: 10,\n        name: 'special:scratchpad',\n      },\n      floating: true,\n      fullscreen: true,\n      fullscreenMode: 1,\n    };\n    \n    expect(isHyprlandWindow(complexWindow)).toBe(true);\n    const validation = validateHyprlandWindow(complexWindow);\n    expect(validation.success).toBe(true);\n  });\n  \n  test('should handle edge cases in monitor data', () => {\n    const edgeCaseMonitor: HyprlandMonitor = {\n      ...mockMonitor,\n      scale: 2.0,\n      transform: 1,\n      reserved: [32, 0, 32, 0],\n      availableModes: [],\n      vrr: true,\n    };\n    \n    expect(isHyprlandMonitor(edgeCaseMonitor)).toBe(true);\n    const validation = validateHyprlandMonitor(edgeCaseMonitor);\n    expect(validation.success).toBe(true);\n  });\n  \n  test('should validate workspace with no windows', () => {\n    const emptyWorkspace: HyprlandWorkspace = {\n      ...mockWorkspace,\n      windows: 0,\n      lastwindow: '',\n      lastwindowtitle: '',\n    };\n    \n    expect(isHyprlandWorkspace(emptyWorkspace)).toBe(true);\n    const validation = validateHyprlandWorkspace(emptyWorkspace);\n    expect(validation.success).toBe(true);\n  });\n});\n\n// ============================================================================\n// Performance Tests\n// ============================================================================\n\ndescribe('Performance Tests', () => {\n  test('should validate large arrays efficiently', () => {\n    // Create a large array of windows for performance testing\n    const largeWindowArray = Array.from({ length: 1000 }, (_, i) => ({\n      ...mockWindow,\n      address: `0x${i.toString(16)}`,\n      title: `Window ${i}`,\n      pid: 1000 + i,\n    }));\n    \n    const startTime = performance.now();\n    const result = validateHyprlandWindowArray(largeWindowArray);\n    const endTime = performance.now();\n    \n    expect(result.success).toBe(true);\n    expect(result.data).toHaveLength(1000);\n    \n    // Should complete within reasonable time (adjust threshold as needed)\n    const duration = endTime - startTime;\n    expect(duration).toBeLessThan(1000); // 1 second threshold\n  });\n});"